#!/usr/bin/env ruby

require 'aws-sdk'
require 'pry'
require 'nokogiri'
require 'open-uri'
require 'yui/compressor'
require 'zlib'
require 'h5-min'

@asset_hosts = AWS.cloud_front.client.list_distributions.items.map do |dist|
  "http://#{dist.domain_name}" if dist.enabled && dist.status == "Deployed" && dist.origins.items.first.id == "S3-chokaigi"
end.to_a.compact

module HTML5
  @minifier.send(:define_method, :format_attributes) do |attrs, element|
    return '' if attrs.empty?
    attrs.map do |name, value|
      [normalise_name(name), format_attribute_value(value)]
    end.sort_by do |name, value|
      name
    end.map do |name, value|
      if boolean_attribute?(element, name)
        name.to_s
      else
        "#{name}=#{value}"
      end
    end.join(' ').insert(0, ' ')
  end
end

puts "asset_hosts = #{@asset_hosts.to_s}"

def asset_base
  host = @asset_hosts.shift
  @asset_hosts.push host
  host
end

html = File.read("public_html/index.html")
html = html.gsub(/(\.)?\/img\//){ |match| "#{asset_base}/images/" }

nokogiri = Nokogiri::HTML(html)

bucket = AWS.s3.buckets['chokaigi']
ts = Time.now.to_i

styles = nokogiri.css("link[rel=stylesheet]")
css = styles.map do |style|
  src = style[:href]
  if src =~ /http/
    content = open(src).read
  else
    content = File.read("public_html/#{src}").gsub(/(\.\.)?\/img\//) { "#{asset_base}/images/" }
  end
  content
end.join("\n")
css_compressor = YUI::CssCompressor.new
css = css_compressor.compress(css)
bucket.objects["stylesheets/application-#{ts}.css"].write(css, acl: :public_read, content_type: 'text/css')
bucket.objects["stylesheets/application-#{ts}.css.gz"].write(Zlib::Deflate.deflate(css, Zlib::BEST_COMPRESSION), acl: :public_read, content_encoding: "gzip", content_type: "text/css")

scripts = nokogiri.css("script[src]")
js = scripts.map do |script|
  src = script[:src]
  if src =~ /http/
    content = open(src).read
  else
    content = File.read("public_html/#{src}")
  end
  content
end.join("\n")
js_compressor = YUI::JavaScriptCompressor.new(munge: true)
js = js_compressor.compress(js)
bucket.objects["javascripts/application-#{ts}.js"].write(js, acl: :public_read, content_type: "application/javascript")
bucket.objects["javascripts/application-#{ts}.js.gz"].write(Zlib::Deflate.deflate(js, Zlib::BEST_COMPRESSION), acl: :public_read, content_encoding: "gzip", content_type: "application/javascript")

if ENV['SEND_IMAGE']
  images = Dir.glob("public_html/img/**/*").each do |file|
    unless File.directory?(file)
      filename = file.gsub(/public_html\/img\//, '')
      obj = bucket.objects["images/#{filename}"]
      obj.write(file: file, acl: :public_read) unless obj.exists?
      puts "#{filename} done"
    end
  end
end

styles.each_with_index do |style, i|
  if i == 0
    style[:href] = "#{asset_base}/stylesheets/application-#{ts}.css"
  else
    style.remove
  end
end
scripts.each_with_index do |script, i|
  if i == 0
    script[:src] = "#{asset_base}/javascripts/application-#{ts}.js"
  else
    script.remove
  end
end

File.write("gen/index.html", HTML5.minify(nokogiri.to_s))
